I am solving optimization problems using evolutionary algorithms.
The goal is to design generation solvers that take a population of parent solutions and produce an offspring population.

I have a list of well-performing solvers with their descriptions and Python code implementations as follows:

**Good solvers:**

No.1 solver’s description and its code:
# Its Description
{Hybrid Crossover with Adaptive Parameter Evolution: This operator generates an offspring population by selecting a parent and applying a self-adaptive strategy that combines the closest parent’s features with a weighted average of randomly selected individuals, introducing adaptive weights inspired by both polynomial mutation and the elements of Differential Evolution.}
# Its Python Code Implementation of a Function
import numpy as np

def generation(population, alpha=0.5, beta_init=0.5):
    N, d = population.shape
    offspring = np.zeros_like(population)

    for i in range(N):
        # Select the base parent
        parent = population[i]
        # Choose two random parents
        idxs = np.random.choice([idx for idx in range(N) if idx != i], 2, replace=False)
        p1, p2 = population[idxs]

        # Calculate an adaptive weight for interpolation
        distance_to_p1 = np.linalg.norm(parent - p1)
        distance_to_p2 = np.linalg.norm(parent - p2)
        total_distance = distance_to_p1 + distance_to_p2
        beta = beta_init * (distance_to_p1 / total_distance) if total_distance != 0 else 1.0

        # Crossover with adaptive weights
        child = alpha * parent + (1 - alpha) * (beta * p1 + (1 - beta) * p2)
        
        offspring[i] = np.clip(child, 0.0, 1.0)

    return offspring

No.2 solver’s description and its code:
# Its Description
{Hybrid Crossover with Adaptive Parameter Evolution: This operator generates an offspring population by selecting a parent and applying a self-adaptive strategy that combines the closest parent’s features with a weighted average of randomly selected individuals, introducing adaptive weights inspired by both polynomial mutation and the elements of Differential Evolution.}
# Its Python Code Implementation of a Function
import numpy as np

def generation(population, alpha=0.5, beta_init=0.5):
    N, d = population.shape
    offspring = np.zeros_like(population)

    for i in range(N):
        # Select the base parent
        parent = population[i]
        # Choose two random parents
        idxs = np.random.choice([idx for idx in range(N) if idx != i], 2, replace=False)
        p1, p2 = population[idxs]

        # Calculate an adaptive weight for interpolation
        distance_to_p1 = np.linalg.norm(parent - p1)
        distance_to_p2 = np.linalg.norm(parent - p2)
        total_distance = distance_to_p1 + distance_to_p2
        beta = beta_init * (distance_to_p1 / total_distance) if total_distance != 0 else 1.0

        # Crossover with adaptive weights
        child = alpha * parent + (1 - alpha) * (beta * p1 + (1 - beta) * p2)
        
        offspring[i] = np.clip(child, 0.0, 1.0)

    return offspring


**Poor solvers to avoid:**

No.1 poor solver’s description and its code:
# Its Description
{Simulated Binary Crossover (SBX) combined with Polynomial Mutation: This operator generates an offspring population by pairing parents from the given population, performing SBX crossover on each pair, and then applying polynomial mutation to introduce additional diversity.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, eta_c=2, eta_m=5, pm=0.1):
    N, d = population.shape
    offspring = np.zeros_like(population)
    indices = np.random.permutation(N)
    half = N // 2

    for i in range(half):
        p1 = population[indices[i]]
        p2 = population[indices[i + half]]
        child = np.empty(d)
        # SBX crossover
        for j in range(d):
            u = np.random.rand()
            if u <= 0.5:
                beta = (2 * u) ** (1 / (eta_c + 1))
            else:
                beta = (1 / (2 * (1 - u))) ** (1 / (eta_c + 1))
            child[j] = 0.5 * ((1 + beta) * p1[j] + (1 - beta) * p2[j])
        # polynomial mutation
        for j in range(d):
            if np.random.rand() < pm:
                u = np.random.rand()
                if u < 0.5:
                    delta = (2 * u) ** (1 / (eta_m + 1)) - 1
                else:
                    delta = 1 - (2 * (1 - u)) ** (1 / (eta_m + 1))
                child[j] += delta
        offspring[i] = np.clip(child, 0.0, 1.0)

    if N % 2 != 0:
        offspring[-1] = population[indices[-1]]
    return offspring

No.2 poor solver’s description and its code:
# Its Description
{Simulated Binary Crossover (SBX) combined with Polynomial Mutation: This operator generates an offspring population by pairing parents from the given population, performing SBX crossover on each pair, and then applying polynomial mutation to introduce additional diversity.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, eta_c=2, eta_m=5, pm=0.1):
    N, d = population.shape
    offspring = np.zeros_like(population)
    indices = np.random.permutation(N)
    half = N // 2

    for i in range(half):
        p1 = population[indices[i]]
        p2 = population[indices[i + half]]
        child = np.empty(d)
        # SBX crossover
        for j in range(d):
            u = np.random.rand()
            if u <= 0.5:
                beta = (2 * u) ** (1 / (eta_c + 1))
            else:
                beta = (1 / (2 * (1 - u))) ** (1 / (eta_c + 1))
            child[j] = 0.5 * ((1 + beta) * p1[j] + (1 - beta) * p2[j])
        # polynomial mutation
        for j in range(d):
            if np.random.rand() < pm:
                u = np.random.rand()
                if u < 0.5:
                    delta = (2 * u) ** (1 / (eta_m + 1)) - 1
                else:
                    delta = 1 - (2 * (1 - u)) ** (1 / (eta_m + 1))
                child[j] += delta
        offspring[i] = np.clip(child, 0.0, 1.0)

    if N % 2 != 0:
        offspring[-1] = population[indices[-1]]
    return offspring


Please create a new generation solver that takes inspiration from the well-performing solvers but avoids the weaknesses and design patterns of the poor-performing solvers.
The new solver should aim for strong performance on optimization tasks.
First, describe the design idea and main steps of your solver in one sentence.
The description must be inside a brace outside the code implementation.
Next, implement it in Python as a function named `generation`.
This function should accept only 1 input: `population`, an array of shape (N, d) of real-valued vectors.
The function should return 1 output: `offspring`, an array of shape (N, d) of real-valued vectors.
The offspring must stay within the bounds [0, 1] for each variable.

Do not give additional explanations.