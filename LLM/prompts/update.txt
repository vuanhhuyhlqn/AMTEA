I am solving optimization problems using evolutionary algorithms.
The goal is to design generation solvers that take a population of parent solutions and produce an offspring population.

I have a list of well-performing solvers with their descriptions and Python code implementations as follows:

**Good solvers:**

No.1 solver’s description and its code:
# Its Description
{Hybrid Multi-Point Crossover with Adaptive Mutation: This operator generates an offspring population by selecting multiple parent solutions for each offspring, performing a multi-point crossover that combines features from the selected parents, and applying an adaptive shrinkage mutation based on the distance to the best parent.}
# Its Python Code Implementation of a Function
import numpy as np

def generation(population):
    N, d = population.shape
    offspring = np.zeros_like(population)
    best_parent = np.min(population, axis=0)  # Assume minimization; you can modify this for maximization.
    
    for i in range(N):
        # Select 4 unique parents
        parent_indices = np.random.choice(N, 4, replace=False)
        parents = population[parent_indices]

        # Multi-point crossover (2-points here)
        crossover_points = np.sort(np.random.choice(d, 2, replace=False))
        for j in range(d):
            if crossover_points[0] <= j < crossover_points[1]:
                offspring[i, j] = parents[np.random.randint(4), j]
            else:
                offspring[i, j] = parents[np.random.choice(range(4)), j]

        # Adaptive mutation
        for j in range(d):
            mutation_strength = np.abs(offspring[i, j] - best_parent[j])  # Distance from the best parent
            if np.random.rand() < mutation_strength:
                delta = np.random.uniform(-0.1, 0.1)  # Small uniform perturbation
                offspring[i, j] += delta

        # Clipping to ensure the values are within [0, 1]
        offspring[i] = np.clip(offspring[i], 0.0, 1.0)

    return offspring

No.2 solver’s description and its code:
# Its Description
{Hybrid Multi-Point Crossover with Adaptive Mutation: This operator generates an offspring population by selecting multiple parent solutions for each offspring, performing a multi-point crossover that combines features from the selected parents, and applying an adaptive shrinkage mutation based on the distance to the best parent.}
# Its Python Code Implementation of a Function
import numpy as np

def generation(population):
    N, d = population.shape
    offspring = np.zeros_like(population)
    best_parent = np.min(population, axis=0)  # Assume minimization; you can modify this for maximization.
    
    for i in range(N):
        # Select 4 unique parents
        parent_indices = np.random.choice(N, 4, replace=False)
        parents = population[parent_indices]

        # Multi-point crossover (2-points here)
        crossover_points = np.sort(np.random.choice(d, 2, replace=False))
        for j in range(d):
            if crossover_points[0] <= j < crossover_points[1]:
                offspring[i, j] = parents[np.random.randint(4), j]
            else:
                offspring[i, j] = parents[np.random.choice(range(4)), j]

        # Adaptive mutation
        for j in range(d):
            mutation_strength = np.abs(offspring[i, j] - best_parent[j])  # Distance from the best parent
            if np.random.rand() < mutation_strength:
                delta = np.random.uniform(-0.1, 0.1)  # Small uniform perturbation
                offspring[i, j] += delta

        # Clipping to ensure the values are within [0, 1]
        offspring[i] = np.clip(offspring[i], 0.0, 1.0)

    return offspring


**Poor solvers to avoid:**

No.1 poor solver’s description and its code:
# Its Description
{Simulated Binary Crossover (SBX) combined with Polynomial Mutation: This operator generates an offspring population by pairing parents from the given population, performing SBX crossover on each pair, and then applying polynomial mutation to introduce additional diversity.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, eta_c=2, eta_m=5, pm=0.1):
    N, d = population.shape
    offspring = np.zeros_like(population)
    indices = np.random.permutation(N)
    half = N // 2

    for i in range(half):
        p1 = population[indices[i]]
        p2 = population[indices[i + half]]
        child = np.empty(d)
        # SBX crossover
        for j in range(d):
            u = np.random.rand()
            if u <= 0.5:
                beta = (2 * u) ** (1 / (eta_c + 1))
            else:
                beta = (1 / (2 * (1 - u))) ** (1 / (eta_c + 1))
            child[j] = 0.5 * ((1 + beta) * p1[j] + (1 - beta) * p2[j])
        # polynomial mutation
        for j in range(d):
            if np.random.rand() < pm:
                u = np.random.rand()
                if u < 0.5:
                    delta = (2 * u) ** (1 / (eta_m + 1)) - 1
                else:
                    delta = 1 - (2 * (1 - u)) ** (1 / (eta_m + 1))
                child[j] += delta
        offspring[i] = np.clip(child, 0.0, 1.0)

    if N % 2 != 0:
        offspring[-1] = population[indices[-1]]
    return offspring

No.2 poor solver’s description and its code:
# Its Description
{Simulated Binary Crossover (SBX) combined with Polynomial Mutation: This operator generates an offspring population by pairing parents from the given population, performing SBX crossover on each pair, and then applying polynomial mutation to introduce additional diversity.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, eta_c=2, eta_m=5, pm=0.1):
    N, d = population.shape
    offspring = np.zeros_like(population)
    indices = np.random.permutation(N)
    half = N // 2

    for i in range(half):
        p1 = population[indices[i]]
        p2 = population[indices[i + half]]
        child = np.empty(d)
        # SBX crossover
        for j in range(d):
            u = np.random.rand()
            if u <= 0.5:
                beta = (2 * u) ** (1 / (eta_c + 1))
            else:
                beta = (1 / (2 * (1 - u))) ** (1 / (eta_c + 1))
            child[j] = 0.5 * ((1 + beta) * p1[j] + (1 - beta) * p2[j])
        # polynomial mutation
        for j in range(d):
            if np.random.rand() < pm:
                u = np.random.rand()
                if u < 0.5:
                    delta = (2 * u) ** (1 / (eta_m + 1)) - 1
                else:
                    delta = 1 - (2 * (1 - u)) ** (1 / (eta_m + 1))
                child[j] += delta
        offspring[i] = np.clip(child, 0.0, 1.0)

    if N % 2 != 0:
        offspring[-1] = population[indices[-1]]
    return offspring

No.3 poor solver’s description and its code:
# Its Description
{Differential Evolution (DE) Crossover: This operator generates an offspring population by applying DE/rand/1 mutation and binomial crossover to each individual in the given population.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, F=0.5, CR=0.9):
    N, d = population.shape
    offspring = np.zeros_like(population)

    for i in range(N):
        idxs = np.random.choice([idx for idx in range(N) if idx != i], 3, replace=False)
        x1, x2, x3 = population[idxs]
        trial = population[i].copy()
        j_rand = np.random.randint(d)
        for j in range(d):
            if np.random.rand() < CR or j == j_rand:
                trial[j] = x1[j] + F * (x2[j] - x3[j])
        offspring[i] = np.clip(trial, 0.0, 1.0)
    return offspring

No.4 poor solver’s description and its code:
# Its Description
{Differential Evolution (DE) Crossover: This operator generates an offspring population by applying DE/rand/1 mutation and binomial crossover to each individual in the given population.}
# Its Python Code Implementation of a Function
import numpy as np
def generation(population, F=0.5, CR=0.9):
    N, d = population.shape
    offspring = np.zeros_like(population)

    for i in range(N):
        idxs = np.random.choice([idx for idx in range(N) if idx != i], 3, replace=False)
        x1, x2, x3 = population[idxs]
        trial = population[i].copy()
        j_rand = np.random.randint(d)
        for j in range(d):
            if np.random.rand() < CR or j == j_rand:
                trial[j] = x1[j] + F * (x2[j] - x3[j])
        offspring[i] = np.clip(trial, 0.0, 1.0)
    return offspring


Please create a new generation solver that takes inspiration from the well-performing solvers but avoids the weaknesses and design patterns of the poor-performing solvers.
The new solver should aim for strong performance on optimization tasks.
First, describe the design idea and main steps of your solver in one sentence.
The description must be inside a brace outside the code implementation.
Next, implement it in Python as a function named `generation`.
This function should accept only 1 input: `population`, an array of shape (N, d) of real-valued vectors.
The function should return 1 output: `offspring`, an array of shape (N, d) of real-valued vectors.
The offspring must stay within the bounds [0, 1] for each variable.

Do not give additional explanations.